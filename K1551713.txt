_MYDATA SEGMENT
	STR1	DB	0AH, 0DH, '---------------------$'
	STR2	DB	0AH, 0DH, '  SIMPLE CALCULATOR  $'
	STR3	DB	0AH, 0DH, '  BY ZHANG ZHEN YAN  $'
	STR4	DB	0AH, 0DH, 'S=$'
	MAINANS		DW	9 DUP(0)
	ANSCOUNT	EQU	$ - MAINANS
	REMAIN		DB	2 DUP(0)
	REMAINCOUNT	EQU	$ - REMAIN
	FIN			DW	0
	FLAG		DB	0
_MYDATA	ENDS

; NAME: SHOW
; INSTRUCTION: Print a string using function 9.
; REG OCCUPATION: AX, DX.
; INPUT: Already initialized string.
; OUTPUT: None.

SHOW MACRO STR
	PUSH	AX
	PUSH	DX
	LEA		DX, STR
	MOV		AH, 9
	INT		21H
	POP		DX
	POP		AX
ENDM

; NAME: CRLF
; INSTRUCTION: Start a new line.
; REG OCCUPATION: AX, DX.
; INPUT: None.
; OUTPUT: None.

CRLF MACRO
	PUSH	AX
	PUSH	DX
	MOV		AH, 2
	MOV		DL, 0DH
	INT		21H
	MOV		AH, 2
	MOV		DL, 0AH
	INT		21H
	POP		DX
	POP		AX
ENDM

_CODE SEGMENT
	ASSUME	CS: _CODE, DS: _MYDATA
_MAIN PROC	FAR
	PUSH	DS
	MOV		AX, 0
	PUSH	AX
	MOV		AX, _MYDATA
	MOV		DS, AX
; Main program starts here.
	
; Initialization starts here.
	SHOW	STR1
	CRLF
	SHOW	STR2
	SHOW	STR3
	CRLF
	SHOW	STR1
	MOV		AX, 0
	MOV		BX, 0
	MOV		CX, 0
	MOV		DX, 0
	CRLF
	SHOW	STR4
	LEA		SI, MAINANS		; Initialize SI as index for MAINANS.
	LEA		DI, REMAIN		; Initialize DI as index for REMAIN.
; Initialization ends here.
	
_INPUT:
	MOV	AX, 0100H
	INT	21H

_COMPARE:
	CMP		AL, 0DH
	JE		_FINAL		; Input CR.
	CMP		AL, 2BH
	JE		_PLUS		; Input '+'.
	CMP		AL, 2DH
	JE		_MINUS		; Input '-'.
	CMP		AL, 2AH
	JE		_MTPLY		; Input '*'.
	CMP		AL, 2FH
	JE		_DVIDE		; Input '/'.
	CMP		AL, 30H
	JB		_INPUT		; Illegal inputs < 30H.
	CMP		AL, 39H
	JBE		_DIGITS		; Input 30H ~ 39H.
	JMP		_INPUT		; Illegal inputs > 39H.

_DIGITS:
	CMP		FLAG, 0
	JNE		_INPUT
	AND		AX, 000FH		; Change ascii to number.
	PUSH	AX
	INC		FLAG
	JMP		_INPUT

_PLUS:
	CMP		FLAG, 0
	JE		_INPUT
	POP		AX
	CALL	__PLUS
	JMP		_INPUT

_MINUS:
	CMP		FLAG, 0
	JE		_INPUT
	POP		AX
	CALL	__MINUS
	JMP		_INPUT

_MTPLY:
	CMP		FLAG, 0
	JE		_INPUT
	POP		AX
	CALL	__MTPLY
	JMP		_INPUT

_DVIDE:
	CMP		FLAG, 0
	JE		_INPUT
	POP		AX
	CALL	__DVIDE
	JMP		_INPUT

_FINAL:
	CMP		FLAG, 0
	JE		_INPUT
	POP		AX
	CALL	__FINAL
; Main program ends here.
	RET
_MAIN	ENDP

; NAME: __PLUS
; INSTRUCTION: Processes responsing '+' input.
; REG OCCUPATION: AX.
; INPUT: AX, SI.
; OUTPUT: MAINANS, FLAG.

__PLUS PROC		NEAR
	MOV		[SI], AX
	ADD		SI, 2
	DEC		FLAG
__PLUS ENDP

; NAME: __MINUS
; INSTRUCTION: Processes responsing '-' input.
; REG OCCUPATION: AX.
; INPUT: AX.
; OUTPUT: AX, MAINANS.

__MINUS PROC	NEAR
	MOV		[SI], AX
	ADD		SI, 2
_MINUSINPUT:
	MOV		AX, 0100H
	INT		21H
	CMP		AL, 30H
	JB		_MINUSINPUT		; Illegal inputs < 30H.
	CMP		AL, 39H
	JA		_MINUSINPUT		; Illegal inputs > 39H.
	AND		AX, 000FH		; Change ascii to number.
	NEG		AX
	PUSH	AX
__MINUS ENDP

; NAME: __MTPLY
; INSTRUCTION: Processes responsing '*' input.
; REG OCCUPATION: AX, BX.
; INPUT: AX.
; OUTPUT: AX, MAINANS.

__MTPLY PROC	NEAR
	PUSH	BX
	MOV		BX, AX
_MTPLYINPUT:
	MOV		AX, 0100H
	INT		21H
	CMP		AL, 30H
	JB		_MTPLYINPUT		; Illegal inputs < 30H.
	CMP		AL, 39H
	JA		_MTPLYINPUT		; Illegal inputs > 39H.
	AND		AX, 000FH		; Change ascii to number.
	IMUL	AX, BX
	POP		BX
	PUSH	AX
__MTPLY ENDP

; NAME: __DVIDE
; INSTRUCTION: Processes responsing '/' input.
; REG OCCUPATION: AX.
; INPUT: AX.
; OUTPUT: AX, MAINANS.

__DVIDE PROC	NEAR
	
__DVIDE ENDP

; NAME: __FINAL
; INSTRUCTION: Final processing.
; REG OCCUPATION: .
; INPUT: MAINANS, REMAIN.
; OUTPUT: FIN.

__FINAL PROC	NEAR
	
__FINAL ENDP

_CODE ENDS
	END	_MAIN